Initial commit

# To create a database 
CREATE DATABASE SHOP

# Create a table : Salespeople 
CREATE TABLE Salespeople(
SNUM INT PRIMARY KEY,
SNAME VARCHAR(20) NOT NULL,
CITY VARCHAR(20) NOT NULL,
COMM INT NOT NULL
);

#Inserting data in salespeople
INSERT INTO salespeople(snum,sname,city,comm) VALUES
(1001,'Peel','London',12),
(1002,'Serres','SanJose',13),
(1004,'Motika','London',11),
(1007,'Rifkin','Barcelona',15),
(1003,'AxelRod','New York',10),
(1008,'Fran','London',25);

# Create a table : customers
CREATE TABLE customers(
CNUM INT PRIMARY KEY,
CNAME VARCHAR(20) NOT NULL,
CITY VARCHAR(20) NOT NULL,
RATING INT NOT NULL,
SNUM INT NOT NULL,
FOREIGN KEY(SNUM)
REFERENCES salespeople(SNUM)
);

#Inserting data in customers
INSERT INTO customers (CNUM,CNAME,CITY,RATING,SNUM) VALUES 
(2001,'Hoffman','London',100,1001),
(2002,'Giovanni','Rome',200,1003),
(2003,'Liu','SanJose',200,1002),
(2004,'Grass','Berlin',300,1002),
(2006,'Clemens','London',100,1001),
(2008,'Cisneros','SanJose',300,1007),
(2007,'Pereira','Rome',100,1004);

# Create a table : orders
CREATE TABLE orders(
ONUM INT PRIMARY KEY,
AMT NUMERIC(8,2) NOT NULL,
ODATE DATE NOT NULL,
CNUM INT NOT NULL,
SNUM INT NOT NULL,
FOREIGN KEY(CNUM)
REFERENCES customers(CNUM),
FOREIGN KEY(SNUM)
REFERENCES salespeople(SNUM)
);

#Inserting data in orders
INSERT INTO orders (ONUM,AMT,ODATE,CNUM,SNUM) VALUES
 (3001,18.69,'1990-03-10',2008,1007),
 (3003,767.19,'1990-03-10',2001,1001),
 (3002,1900.10,'1990-03-10',2007,1004),
 (3005,5160.45,'1990-03-10',2003,1002),
 (3006,1098.16,'1990-03-10',2008,1007),
 (3009,1713.23,'1990-04-10',2002,1003),
 (3007,75.75,'1990-04-10',2004,1002),
 (3008,4723.00,'1990-05-10',2006,1001),
 (3010,1309.95,'1990-06-10',2004,1002),
 (3011,9891.88,'1990-06-10',2006,1001);
 
 
 *********************************************************QUERIES********************************************
 
 
 1) List all the columns of the Salespeople table.
 
 SELECT * FROM salespeople;

 snum |  sname  |   city    | comm 
------+---------+-----------+------
 1001 | Peel    | London    |   12
 1002 | Serres  | SanJose   |   13
 1004 | Motika  | London    |   11
 1007 | Rifkin  | Barcelona |   15
 1003 | AxelRod | New York  |   10
 1008 | Fran    | London    |   25
 
 2) List all customers with a rating of 100.
 
 SELECT * FROM customers WHERE rating = 100;
 
 cnum |  cname  |  city  | rating | snum 
------+---------+--------+--------+------
 2001 | Hoffman | London |    100 | 1001
 2006 | Clemens | London |    100 | 1001
 2007 | Pereira | Rome   |    100 | 1004
 
 3) Find the largest order taken by each salesperson on each date.
 
 SELECT snum,MAX(amt),odate FROM orders GROUP BY snum,odate ORDER BY snum,MAX(amt);
 
 snum |   max   |   odate    
------+---------+------------
 1001 |  767.19 | 1990-03-10
 1001 | 4723.00 | 1990-05-10
 1001 | 9891.88 | 1990-06-10
 1002 |   75.75 | 1990-04-10
 1002 | 1309.95 | 1990-06-10
 1002 | 5160.45 | 1990-03-10
 1003 | 1713.23 | 1990-04-10
 1004 | 1900.10 | 1990-03-10
 1007 | 1098.16 | 1990-03-10
 
 4) Arrange the Order table by descending customer number.
 
 SELECT * FROM orders ORDER BY cnum DESC;
 
 onum |   amt   |   odate    | cnum | snum 
------+---------+------------+------+------
 3006 | 1098.16 | 1990-03-10 | 2008 | 1007
 3001 |   18.69 | 1990-03-10 | 2008 | 1007
 3002 | 1900.10 | 1990-03-10 | 2007 | 1004
 3011 | 9891.88 | 1990-06-10 | 2006 | 1001
 3008 | 4723.00 | 1990-05-10 | 2006 | 1001
 3007 |   75.75 | 1990-04-10 | 2004 | 1002
 3010 | 1309.95 | 1990-06-10 | 2004 | 1002
 3005 | 5160.45 | 1990-03-10 | 2003 | 1002
 3009 | 1713.23 | 1990-04-10 | 2002 | 1003
 3003 |  767.19 | 1990-03-10 | 2001 | 1001
 
 5) Find which salespeople currently have orders in the order table.
 
 SELECT DISTINCT(s.snum),s.sname 
 FROM salespeople s
 INNER JOIN orders ON orders.snum = s.snum ORDER BY s.snum;
 
 snum |  sname  
------+---------
 1001 | Peel
 1002 | Serres
 1003 | AxelRod
 1004 | Motika
 1007 | Rifkin
 
 6) List names of all customers matched with the salespeople serving them.
 
 SELECT customers.cnum,customers.cname, salespeople.sname
 FROM customers
 INNER JOIN salespeople
 ON customers.snum =  salespeople.snum ORDER BY customers.cnum;
 
 cnum |  cname   |  sname  
------+----------+---------
 2001 | Hoffman  | Peel
 2002 | Giovanni | AxelRod
 2003 | Liu      | Serres
 2004 | Grass    | Serres
 2006 | Clemens  | Peel
 2007 | Pereira  | Motika
 2008 | Cisneros | Rifkin
 
 7) Find the names and numbers of all salespeople who have more than one customer.
 
 SELECT s.SNUM, s.SNAME 
 FROM salespeople s 
 WHERE  1 < (SELECT COUNT(*) 
            FROM customers c
            WHERE s.SNUM=c.SNUM);
            
 snum | sname  
------+--------
 1001 | Peel
 1002 | Serres
 
 8) Count the orders of each of the salespeople and output the results in descending order.
 
 SELECT salespeople.snum,COUNT(ONUM) FROM salespeople,orders WHERE salespeople.snum = orders.snum GROUP BY  salespeople.snum ORDER BY COUNT(ONUM) DESC ;
 
 snum | count 
------+-------
 1002 |     3
 1001 |     3
 1007 |     2
 1003 |     1
 1004 |     1
 
 9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose.
 
 SELECT * FROM customers WHERE EXISTS ( SELECT * FROM customers WHERE city = 'SanJose' );
 
 cnum |  cname   |  city   | rating | snum 
------+----------+---------+--------+------
 2001 | Hoffman  | London  |    100 | 1001
 2002 | Giovanni | Rome    |    200 | 1003
 2003 | Liu      | SanJose |    200 | 1002
 2004 | Grass    | Berlin  |    300 | 1002
 2006 | Clemens  | London  |    100 | 1001
 2008 | Cisneros | SanJose |    300 | 1007
 2007 | Pereira  | Rome    |    100 | 1004
 
 10) Match salespeople to customers according to what city they live in.
 
 SELECT salespeople.sname, customers.cname, salespeople.city
 FROM salespeople
 INNER JOIN customers
 ON customers.city = salespeople.city;
 
 sname  |  cname   |  city   
--------+----------+---------
 Peel   | Clemens  | London
 Peel   | Hoffman  | London
 Serres | Cisneros | SanJose
 Serres | Liu      | SanJose
 Motika | Clemens  | London
 Motika | Hoffman  | London
 Fran   | Clemens  | London
 Fran   | Hoffman  | London
 
 11) Find all the customers in SanJose who have a rating above 200.
 
 SELECT cnum,cname,rating,city FROM customers WHERE city = 'SanJose' AND rating > 200 ;
 
 cnum |  cname   | rating |  city   
------+----------+--------+---------
 2008 | Cisneros |    300 | SanJose
 
 12) List the names and commissions of all salespeople in London.
 
 SELECT sname,comm FROM salespeople WHERE city = 'London';
 
 sname  | comm 
--------+------
 Peel   |   12
 Motika |   11
 Fran   |   25
 
 13) List all the orders of Salesperson Motika from the orders table.
 
 SELECT * FROM orders WHERE snum = ( SELECT snum FROM salespeople WHERE sname = 'Motika' );
 
 onum |   amt   |   odate    | cnum | snum 
------+---------+------------+------+------
 3002 | 1900.10 | 1990-03-10 | 2007 | 1004
 
 14) Find all customers who booked orders on October 3.
 
 SELECT customers.cnum,customers.cname,orders.odate FROM customers  INNER JOIN orders  ON orders.cnum = customers.cnum WHERE orders.odate = '1990-03-10';
 
 cnum |  cname   |   odate    
------+----------+------------
 2001 | Hoffman  | 1990-03-10
 2003 | Liu      | 1990-03-10
 2008 | Cisneros | 1990-03-10
 2008 | Cisneros | 1990-03-10
 2007 | Pereira  | 1990-03-10
 
 15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above
     the maximum Amount.
 
 SELECT SUM(amt),odate FROM orders a GROUP BY odate HAVING SUM(amt) >= 2000+(SELECT MAX(amt) FROM orders b WHERE a.odate = b.odate);
 
 sum   |   odate    
---------+------------
 8944.59 | 1990-03-10
 
 16) Select all orders that had amounts that were greater than at least one of the orders from October 6.
 
 SELECT * FROM orders WHERE amt > ANY  ( SELECT amt FROM orders WHERE odate = '1990-06-10');
 
 onum |   amt   |   odate    | cnum | snum 
------+---------+------------+------+------
 3002 | 1900.10 | 1990-03-10 | 2007 | 1004
 3005 | 5160.45 | 1990-03-10 | 2003 | 1002
 3009 | 1713.23 | 1990-04-10 | 2002 | 1003
 3008 | 4723.00 | 1990-05-10 | 2006 | 1001
 3011 | 9891.88 | 1990-06-10 | 2006 | 1001
 
 17) Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300
 
 SELECT salespeople.snum,salespeople.sname,customers.cname,customers.rating from salespeople,customers
 WHERE EXISTS ( SELECT customers.cname WHERE customers.snum = salespeople.snum AND customers.rating = 300);
 
 snum | sname  |  cname   | rating 
------+--------+----------+--------
 1002 | Serres | Grass    |    300
 1007 | Rifkin | Cisneros |    300
 
 18) Find all customers whose cnum is 1000 above the snum of Serres.
 
 SELECT * FROM customers WHERE cnum = (SELECT 1000 +snum from salespeople WHERE sname ='Serres');
 
 cnum |  cname   | city | rating | snum 
------+----------+------+--------+------
 2002 | Giovanni | Rome |    200 | 1003
 
 19) Give the salespeopleâ€™s commissions as percentages instead of decimal numbers
 
 SELECT snum,sname,CAST(comm AS NUMERIC)/100 from salespeople;
 
 snum |  sname  |        ?column?        
------+---------+------------------------
 1001 | Peel    | 0.12000000000000000000
 1002 | Serres  | 0.13000000000000000000
 1004 | Motika  | 0.11000000000000000000
 1007 | Rifkin  | 0.15000000000000000000
 1003 | AxelRod | 0.10000000000000000000
 1008 | Fran    | 0.25000000000000000000
 
 20) Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000.
 
 SELECT MAX(amt),snum,odate FROM orders GROUP BY snum,odate HAVING MAX(amt) >= 3000;
 
 max   | snum |   odate    
---------+------+------------
 9891.88 | 1001 | 1990-06-10
 4723.00 | 1001 | 1990-05-10
 5160.45 | 1002 | 1990-03-10
 
 21) List all the largest orders for October 3, for each salesperson
 
 SELECT snum,max(amt),odate FROM orders  WHERE odate = '1990-03-10' GROUP BY snum,odate;
 
 snum |   max   |   odate    
------+---------+------------
 1001 |  767.19 | 1990-03-10
 1002 | 5160.45 | 1990-03-10
 1004 | 1900.10 | 1990-03-10
 1007 | 1098.16 | 1990-03-10
 
 22) Find all customers located in cities where Serres has customers.
 
 SELECT * FROM customers WHERE city  = ( SELECT city FROM salespeople WHERE sname = 'Serres');
 
 cnum |  cname   |  city   | rating | snum 
------+----------+---------+--------+------
 2003 | Liu      | SanJose |    200 | 1002
 2008 | Cisneros | SanJose |    300 | 1007
 
 23) Select all customers with a rating above 200.
 
 SELECT * FROM customers WHERE rating > 200 ;
 
 cnum |  cname   |  city   | rating | snum 
------+----------+---------+--------+------
 2004 | Grass    | Berlin  |    300 | 1002
 2008 | Cisneros | SanJose |    300 | 1007
 
 24) Count the number of salespeople currently having orders in the orders table.
 
 SELECT COUNT(DISTINCT(snum)) FROM orders;
 
 count 
-------
     5
 25) Write a query that produces all customers serviced by salespeople with a commission above 12%. 
 Output the customerâ€™s name,salespersonâ€™s name and the salespersonâ€™s rate of commission.
 
 SELECT customers.cname,salespeople.sname,salespeople.comm FROM customers JOIN salespeople ON  salespeople.snum = customers.snum AND salespeople.comm > 12;
 
 cname   | sname  | comm 
----------+--------+------
 Liu      | Serres |   13
 Grass    | Serres |   13
 Cisneros | Rifkin |   15
 
 26) Find salespeople who have multiple customers.
 
 SELECT * FROM salespeople WHERE snum IN (SELECT snum FROM customers GROUP BY snum HAVING COUNT(*) > 1) ;
 
 snum | sname  |  city   | comm 
------+--------+---------+------
 1001 | Peel   | London  |   12
 1002 | Serres | SanJose |   13
 
 27) Find salespeople with customers located in their own cities.
 
 SELECT salespeople.snum,salespeople.sname,customers.cname,customers.city  FROM salespeople 
 JOIN customers ON customers.snum = salespeople.snum AND customers.city = salespeople.city;
 
 snum | sname  |  cname  |  city   
------+--------+---------+---------
 1001 | Peel   | Hoffman | London
 1002 | Serres | Liu     | SanJose
 1001 | Peel   | Clemens | London
 
 28) Find all salespeople whose name starts with â€˜Pâ€™ and fourth character is â€˜Iâ€™.
 
 SELECT * FROM salespeople WHERE sname like 'P__I%';
 
 snum | sname | city | comm 
------+-------+------+------

 29) Write a query that uses a subquery to obtain all orders for the customer named â€˜Cisnerosâ€™. Assume you do not know his customer number.
 
 SELECT * FROM orders WHERE cnum = ( SELECT cnum FROM customers WHERE cname = 'Cisneros');
 
 onum |   amt   |   odate    | cnum | snum 
------+---------+------------+------+------
 3001 |   18.69 | 1990-03-10 | 2008 | 1007
 3006 | 1098.16 | 1990-03-10 | 2008 | 1007
 
 30) Find the largest orders for Serres and Rifkin.
 
 SELECT snum,max(amt) FROM orders GROUP BY snum HAVING snum in ( SELECT snum FROM salespeople WHERE sname = 'Serres' OR sname = 'Rifkin');
 
 snum |   max   
------+---------
 1002 | 5160.45
 1007 | 1098.16
 
 31) Sort the salespeople table in the following order: snum, sname, commission, city.
 
 SELECT * FROM salespeople ORDER BY snum,sname,comm,city;
 
 snum |  sname  |   city    | comm 
------+---------+-----------+------
 1001 | Peel    | London    |   12
 1002 | Serres  | SanJose   |   13
 1003 | AxelRod | New York  |   10
 1004 | Motika  | London    |   11
 1007 | Rifkin  | Barcelona |   15
 1008 | Fran    | London    |   25
(6 rows)
 
 
 
 32) Select all customers whose names fall in between â€˜Aâ€™ and â€˜Gâ€™ alphabetical range.
 
 SELECT *  FROM customers WHERE cname SIMILAR TO '[A-G]%';
 
 cnum |  cname   |  city   | rating | snum 
------+----------+---------+--------+------
 2002 | Giovanni | Rome    |    200 | 1003
 2004 | Grass    | Berlin  |    300 | 1002
 2006 | Clemens  | London  |    100 | 1001
 2008 | Cisneros | SanJose |    300 | 1007
(4 rows)
 
 33) Select all the possible combinations of customers you can assign.
 
 SELECT S.snum,C.cnum,S.sname,C.cname 
 FROM salespeople S
 CROSS JOIN customers C;
 
 snum | cnum |  sname  |  cname   
------+------+---------+----------
 1001 | 2001 | Peel    | Hoffman
 1001 | 2002 | Peel    | Giovanni
 1001 | 2003 | Peel    | Liu
 1001 | 2004 | Peel    | Grass
 1001 | 2006 | Peel    | Clemens
 1001 | 2008 | Peel    | Cisneros
 1001 | 2007 | Peel    | Pereira
 1002 | 2001 | Serres  | Hoffman
 1002 | 2002 | Serres  | Giovanni
 1002 | 2003 | Serres  | Liu
 1002 | 2004 | Serres  | Grass
 1002 | 2006 | Serres  | Clemens
 1002 | 2008 | Serres  | Cisneros
 1002 | 2007 | Serres  | Pereira
 1004 | 2001 | Motika  | Hoffman
 1004 | 2002 | Motika  | Giovanni
 1004 | 2003 | Motika  | Liu
 1004 | 2004 | Motika  | Grass
 1004 | 2006 | Motika  | Clemens
 1004 | 2008 | Motika  | Cisneros
 1004 | 2007 | Motika  | Pereira
 1007 | 2001 | Rifkin  | Hoffman
 1007 | 2002 | Rifkin  | Giovanni
 1007 | 2003 | Rifkin  | Liu
 1007 | 2004 | Rifkin  | Grass
 1007 | 2006 | Rifkin  | Clemens
 1007 | 2008 | Rifkin  | Cisneros
 1007 | 2007 | Rifkin  | Pereira
 1003 | 2001 | AxelRod | Hoffman
 1003 | 2002 | AxelRod | Giovanni
 1003 | 2003 | AxelRod | Liu
 1003 | 2004 | AxelRod | Grass
 1003 | 2006 | AxelRod | Clemens
 1003 | 2008 | AxelRod | Cisneros
 1003 | 2007 | AxelRod | Pereira
 1008 | 2001 | Fran    | Hoffman
 1008 | 2002 | Fran    | Giovanni
 1008 | 2003 | Fran    | Liu
 1008 | 2004 | Fran    | Grass
 1008 | 2006 | Fran    | Clemens
 1008 | 2008 | Fran    | Cisneros
 1008 | 2007 | Fran    | Pereira
(42 rows)
 
 
 34) Select all orders that are greater than the average for October 4.
 
 SELECT onum,amt,odate
 FROM orders
 WHERE amt > (SELECT AVG(amt)  FROM orders WHERE odate = '1990-04-10') AND odate = '1990-04-10';
 
 onum |   amt   |   odate    
------+---------+------------
 3009 | 1713.23 | 1990-04-10
 
 35) Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum for their city
 
 SELECT cnum,cname
 FROM customers C
 WHERE rating = (SELECT MAX(rating) FROM customers WHERE city=C.city);
 
 cnum |  cname   
------+----------
 2001 | Hoffman
 2002 | Giovanni
 2004 | Grass
 2006 | Clemens
 2008 | Cisneros
 
 36) Write a query that totals the orders for each day and places the results in descending order.
 
 SELECT COUNT(onum),odate 
 FROM orders
 GROUP BY odate 
 ORDER BY COUNT(onum) DESC;
 
 count |   odate    
-------+------------
     5 | 1990-03-10
     2 | 1990-06-10
     2 | 1990-04-10
     1 | 1990-05-10

 37) Write a select command that produces the rating followed by the name of each customer in SanJose.
 
 SELECT rating,cname
 FROM customers 
 WHERE city = 'SanJose';
 
 rating |  cname   
--------+----------
    200 | Liu
    300 | Cisneros

 38) Find all orders with amounts smaller than any amount for a customer in SanJose.
 
 SELECT * FROM orders WHERE amt< ANY (SELECT amt
 FROM orders O
 INNER JOIN customers C
 ON O.cnum=C.cnum WHERE city='SanJose');
 
 onum |   amt   |   odate    | cnum | snum 
------+---------+------------+------+------
 3001 |   18.69 | 1990-03-10 | 2008 | 1007
 3003 |  767.19 | 1990-03-10 | 2001 | 1001
 3002 | 1900.10 | 1990-03-10 | 2007 | 1004
 3006 | 1098.16 | 1990-03-10 | 2008 | 1007
 3009 | 1713.23 | 1990-04-10 | 2002 | 1003
 3007 |   75.75 | 1990-04-10 | 2004 | 1002
 3008 | 4723.00 | 1990-05-10 | 2006 | 1001
 3010 | 1309.95 | 1990-06-10 | 2004 | 1002
 
 39) Find all orders with above average amounts for their customers.
 
 SELECT *                                       
 FROM orders O1
 WHERE amt > (SELECT AVG(amt) FROM orders O2 WHERE O1.cnum = o2.cnum);
 
 onum |   amt   |   odate    | cnum | snum 
------+---------+------------+------+------
 3006 | 1098.16 | 1990-03-10 | 2008 | 1007
 3010 | 1309.95 | 1990-06-10 | 2004 | 1002
 3011 | 9891.88 | 1990-06-10 | 2006 | 1001
(3 rows)
 
 
 40) Write a query that selects the highest rating in each city.
 
 SELECT city,MAX(rating) AS MAX_RATING
 FROM customers
 GROUP BY city;
 
 city   | max_rating 
---------+------------
 Rome    |        200
 SanJose |        300
 Berlin  |        300
 London  |        100
(4 rows)
 
 
 41) Write a query that calculates the amount of the salespersonâ€™s commission on each order by a customer with a rating above 100.00.
 
 SELECT S.snum,S.sname,O.amt,S.comm,O.amt * S.comm / 100 AS Commission_Amount 
 FROM orders O 
 INNER JOIN customers C
 ON C.cnum = O.cnum AND rating > 100
 INNER JOIN salespeople S
 ON S.snum = O.snum;
 
 snum |  sname  |   amt   | comm |  commission_amount   
------+---------+---------+------+----------------------
 1007 | Rifkin  |   18.69 |   15 |   2.8035000000000000
 1002 | Serres  | 5160.45 |   13 | 670.8585000000000000
 1007 | Rifkin  | 1098.16 |   15 | 164.7240000000000000
 1003 | AxelRod | 1713.23 |   10 | 171.3230000000000000
 1002 | Serres  |   75.75 |   13 |   9.8475000000000000
 1002 | Serres  | 1309.95 |   13 | 170.2935000000000000
 
 42) Count the customers with ratings above SanJoseâ€™s average.
 
 SELECT COUNT(cnum) 
 FROM customers
 WHERE rating > (SELECT AVG(rating) FROM customers WHERE city = 'SanJose');
 
 count 
-------
     2
 
 
 43) Find all salespeople that are located in either Barcelona or London
 
 SELECT * 
 FROM salespeople 
 WHERE CITY IN ('London','Barcelona');
 
 snum | sname  |   city    | comm 
------+--------+-----------+------
 1001 | Peel   | London    |   12
 1004 | Motika | London    |   11
 1007 | Rifkin | Barcelona |   15
 1008 | Fran   | London    |   25
 
 44) Find all salespeople with only one customer.
 
 SELECT S.snum,S.sname 
 FROM salespeople S
 WHERE S.snum in ( SELECT snum FROM customers GROUP BY snum HAVING COUNT(snum) =1);
 
 snum |  sname  
------+---------
 1003 | AxelRod
 1004 | Motika
 1007 | Rifkin
 
 45) Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson.
 
 SELECT C1.cname,C1.snum
 FROM customers C1, customers C2
 WHERE C1.snum = C2.snum;
 
 cname   | snum 
----------+------
 Hoffman  | 1001
 Hoffman  | 1001
 Giovanni | 1003
 Liu      | 1002
 Liu      | 1002
 Grass    | 1002
 Grass    | 1002
 Clemens  | 1001
 Clemens  | 1001
 Cisneros | 1007
 Pereira  | 1004










 
 
 
